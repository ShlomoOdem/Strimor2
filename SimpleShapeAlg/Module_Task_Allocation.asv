function ModuleTransitionData = Module_Task_Allocation(WS,StartConfig, TargetConfig, ConfigShift,Downwards, Line)

[AbsDiff, AlphaDiff, BetaDiff] = GetGroupConfigDiff(StartConfig,TargetConfig);
TopLine = find(StartConfig,1,"last");

DestenationLine_Alpha = find(AlphaDiff >= 1,1,"last");
DestenationLine_Beta = find(BetaDiff >= 1,1,"last");
Dest = [DestenationLine_Alpha,DestenationLine_Beta];

SאשראןמעLןמק
%% Possible situations
% Each module that comes down knows its future location
% "Current_Line","Module_Num","Side","Downwards","Finish","Sequence","DestenationLine","Type","ActionType"
% Remove modules 
    % Whole line - based the nuber of alpha in the top line
        if Line == TopLine && ...
                abs(AbsDiff(Line)) == abs(StartConfig(Line)) && ...
                AlphaDiff(Line) == -1
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","DeleteLine","Current_Line",Line,"Downwards",Downwards,"DestenationLine",Dest);
        
    % One module
        elseif AlphaDiff(Line) == -1 && BetaDiff(Line) >= 0
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","ReduceLine","Current_Line",Line,"Downwards",Downwards,"Type",1,"DestenationLine",Dest);
        elseif BetaDiff(Line) == -1  && AlphDiff(Line) >= 0
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","ReduceLine","Current_Line",Line,"Downwards",Downwards,"Type",-1,"DestenationLine",Dest);
    % Two module
        elseif AlphaDiff(Line) <= -1 && BetaDiff(Line) <= -1
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","ReduceLine","Current_Line",Line,"Downwards",Downwards,"Type",0,"DestenationLine",Dest);

% Adding modules
    % whole line
        elseif Line == (TopLine + 1) && ...
                abs(StartConfig(Line)) == 0
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","CreateLine","Current_Line",Line,"Downwards",Downwards,"Type",0,"DestenationLine",Dest);
    % One module
        elseif AlphaDiff(Line) == 1 && BetaDiff(Line) <= 0
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","AddModule","Current_Line",Line,"Downwards",Downwards,"Type",1,"DestenationLine",Dest);
        elseif AlphaDiff(Line) <= 0 && BetaDiff(Line) == 1
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","AddModule","Current_Line",Line,"Downwards",Downwards,"Type",-1,"DestenationLine",Dest);
    % Two module
        elseif AlphaDiff(Line) >= 1 && BetaDiff(Line) >= 1
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","AddModule","Current_Line",Line,"Downwards",Downwards,"Type",0,"DestenationLine",Dest);


% Switch edges
    % several tasks at ones
        elseif StartConfig(Line) == - TargetConfig(Line)
            ModuleTransitionData = CreatTaskAllocationTable([],"ActionType","Switch","Current_Line",Line,"Downwards",Downwards,"Type",0);
        end

[GroupsSizes,GroupIndexes,GroupsInds] = GetConfigGroupSizes(WS, ConfigShift(:,1));
Edges = Get_GroupEdges(GroupsSizes,GroupIndexes,GroupsInds);

Tbl = CreatTaskAllocationTable;



end





