function WorkerList = Taskmaster(WorkerList,Folders, info, q)
Name = extractBetween(Folders,"N\","\tree","Boundaries","exclusive");
% Name = extractBefore(Name,"_v");
% Name = extractBetween(Folders,"Results\","\","Boundaries","exclusive");
TreeList = "";



for ii = 1:numel(WorkerList)
    
    FolderName = Folders(ii);
    
    switch Name(ii)
        case "OneTree"
                    WorkerList(ii) = parfeval(@ExpendTree,5,FolderName, info);
%             ExpendTree(FolderName, info);
        case "MultyTree"
            info.m = 1;
%             Expend2Tree(FolderName, info)

%             WorkerList(ii) = parfeval(@ExpendMultyTree,1,FolderName, info);
        case "TwoTree"
            %                 Expend2Tree(FolderName, info);
            
            info.RowNumData.function = "";
%             Expend2Tree(FolderName, info);
%             WorkerList(ii) = parfeval(@Expend2Tree,5,FolderName, info);
        otherwise
            info.RowNumData.function = extractBefore(Name(ii),"_"); 
            info.RowNumData.parameter = double(extractAfter(Name(ii),"_"));
%             info.m = double(extractAfter(Name(ii),"m"));
%             WorkerList(ii) = parfeval(@Expend2Tree,5,FolderName, info);
%             Expend2Tree(FolderName, info)
% try
% Expend2Tree(FolderName, info)
% catch eee
%     eee
% end
    end
end
WorkerList(matches({WorkerList.State},'unavailable')) = [];
end

